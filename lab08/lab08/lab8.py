# -*- coding: utf-8 -*-
"""lab8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yaa-FqydIvrbrU68ZRGgLzZ9NN0Bewqc

Importando bibliotecas necessárias
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from keras import layers, models
from keras.datasets import mnist
import cv2

"""Função para adicionar o número colorido na frente da imagem"""

def add_colored_number(image, label):
    color_image = np.repeat(image, 3, axis=-1)
    color = (255, 0, 0) if label % 2 else (0, 0, 255)
    img_uint8 = (color_image * 255).astype(np.uint8)
    img_bgr = cv2.putText(img_uint8, str(label), (5, 23), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 1, cv2.LINE_AA)
    return img_bgr / 255.0

"""Visualizando os dados"""

(X_train, y_train), (X_test, y_test) = mnist.load_data()
print("Formato de x_train:", X_train.shape)
print("Formato de y_train:", y_train.shape)
print("Formato de x_test:", X_test.shape)
print("Formato de y_test:", y_test.shape)

"""Pre-processamento dos dados obtidos"""

X_train = X_train.astype("float32") / 255.
X_test = X_test.astype("float32") / 255.
X_train = np.expand_dims(X_train, -1)
X_test = np.expand_dims(X_test, -1)

print("x_train shape:", X_train.shape)
print("x_test shape:", X_test.shape)

"""Implementando as camadas do autoencoder"""

input_img = layers.Input(shape=(28, 28, 1))

x = layers.Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)
x = layers.MaxPooling2D((2, 2), padding='same')(x)
x = layers.Conv2D(16, (3, 3), activation='relu', padding='same')(x)
encoded = layers.MaxPooling2D((2, 2), padding='same')(x)

x = layers.Conv2D(16, (3, 3), activation='relu', padding='same')(encoded)
x = layers.UpSampling2D((2, 2))(x)
x = layers.Conv2D(32, (3, 3), activation='relu', padding='same')(x)
x = layers.UpSampling2D((2, 2))(x)
decoded = layers.Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)

autoencoder = models.Model(input_img, decoded)
autoencoder.compile(optimizer='adam', loss='binary_crossentropy')
autoencoder.summary()

"""Treinando o modelo"""

history = autoencoder.fit(
    X_train, X_train,
    epochs=5,
    batch_size=128,
    shuffle=True,
    validation_data=(X_test, X_test)
)

"""Realizando a predição e visualizando as predições realizada pelo modelo"""

decoded_imgs = autoencoder.predict(X_test)

n = 10
plt.figure(figsize=(20, 4))
for i in range(n):
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(X_test[i].reshape(28, 28), cmap='gray')
    plt.title(f"Label: {y_test[i]}")
    plt.axis('off')
    ax = plt.subplot(2, n, i + n + 1)
    img = add_colored_number(decoded_imgs[i], y_test[i])
    plt.imshow(img)
    plt.axis('off')
plt.tight_layout()
plt.show()